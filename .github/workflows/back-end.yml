# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: "Back-end"

on:  # yamllint disable-line rule:truthy
    pull_request: null
    push:
        branches:
        - "master"
# Add [skip ci] to commit message to skip CI.

permissions: {}  # yamllint disable-line rule:braces
#permissions: "read-all"
#permissions:
#    contents: "read"

concurrency:
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: true

jobs:
    byte_level:
        name: "0Ô∏è‚É£ Byte-level"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 1
        steps:
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check file permissions"
            run: |
                test "$(find ./ -type f -not -path './.git/*' -executable)" = ""
        -
            # https://github.com/greut/eclint/issues/6
            name: "Check for byte order mark (BOM)"
            run: |
                ! git grep --perl-regexp -I -e '^\xEF\xBB\xBF'
        -
            # https://html.spec.whatwg.org/multipage/named-characters.html
            name: "Find non-printable ASCII characters"
            run: |
                ! LC_ALL=C.UTF-8 git grep --perl-regexp --line-number -e '[^ -~]' -- '*\.php'
                # Ignore lines
                #! LC_ALL=C.UTF-8 git grep --perl-regexp --line-number -e '[^ -~]' -- '*\.php' \
                #    | grep -v '// @ignore-non-ascii$'
                # Filesystem-based
                #! LC_ALL=C.UTF-8 find ./ -type f -name '*.php' -print0 \
                #    | xargs --null -- grep --perl-regexp --with-filename --line-number '[^ -~]'

    syntax_errors:
        name: "1Ô∏è‚É£ Syntax errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.2"
                coverage: "none"
                tools: "parallel-lint"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Search for conflict markers üêå"
            run: |
                ! git grep --line-number -e '^\(<<<<<<<\s\|=======\s\|=======$\|>>>>>>>\s\||||||||\s\)'
        -
            name: "Search for invalid complex curly syntax üêå"
            run: |
                ! git grep -e '\${[A-Z_a-z]' -- '*\.php' '*\.scss'
        -
            name: "Check source code for syntax errors"
            run: "composer exec --no-interaction -- parallel-lint src/"
            # @TODO Check template files for syntax errors

    unit_tests:
        name: "2Ô∏è‚É£ Unit and functional tests"
        needs:
        - "byte_level"
        - "syntax_errors"
        strategy:
            #fail-fast: false
            matrix:
                php-version:
                - "8.2"
                dependencies:
                - "lowest"
                - "highest"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "${{ matrix.php-version }}"
        -
            name: "Setup problem matcher for PHPUnit"
            run: |
                echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            #env:
            #    COMPOSER_AUTH: '{"github-oauth":{"github.com":"${{ github.token }}"}}'
            # yamllint disable-line rule:line-length
            #    COMPOSER_AUTH: '{"http-basic":{"nova.laravel.com":{"username":"${{ secrets.NOVA_LICENSE_ACCOUNT }}","password":"${{ secrets.NOVA_LICENSE_KEY }}"}}}'
            with:
                dependency-versions: "${{ matrix.dependencies }}"
                #composer-options: "--with=laravel/framework:${{ matrix.laravel-constraint }}"
        -
            name: "Declare strict types"
            if: "${{ matrix.dependencies == 'highest' }}"
            run: |
                echo "::group::Install slevomat/coding-standard"
                composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer false
                composer require --no-scripts --dev slevomat/coding-standard
                echo "::endgroup::"
                composer exec -- phpcbf --standard=vendor/slevomat/coding-standard/SlevomatCodingStandard \
                    --sniffs=SlevomatCodingStandard.TypeHints.DeclareStrictTypes src/ \
                    || test "$?" = 1 && exit 0
        -
            name: "Execute unit tests"
            #run: "composer exec -- phpunit"
            run: "composer exec -- pest --ci"
            # @TODO Functional tests
        -
            name: "Tests have failed: upload logs"
            if: "${{ failure() }}"
            uses: "actions/upload-artifact@v3"
            with:
                path: "storage/logs/"
                # Prefix with project name (github.repository contains a slash)
                name: "laravel-logs-${{ matrix.php-version }}-${{ matrix.dependencies }}"
        -
            name: "Send coverage to Coveralls"
            env:
                COVERALLS_REPO_TOKEN: "${{ github.token }}"
            if: "${{ env.COVERALLS_REPO_TOKEN && matrix.php-version == '8.2' && matrix.dependencies == 'highest' }}"
            run: |
                wget --no-verbose \
                    "https://github.com/php-coveralls/php-coveralls/releases/download/v2.5.3/php-coveralls.phar"
                php ./php-coveralls.phar --verbose

    static_analysis:
        name: "3Ô∏è‚É£ Static Analysis"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.2"
                coverage: "none"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check JSON files"
            run: |
                git ls-files --cached -z -- '*\.json' \
                    | xargs -t --null -L 1 -- \
                        php -r 'json_decode(file_get_contents($argv[1]), null, 512, JSON_THROW_ON_ERROR);'
        -
            name: "Validate Composer configuration"
            run: "composer validate --no-interaction --strict"
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            with:
                dependency-versions: "highest"
        -
            name: "Check PSR-4 mapping üêå"
            run: "composer dump-autoload --optimize --strict-psr"
        -
            name: "Check for security vulnerability advisories"
            run: "composer audit"
        #-
        #    name: "Check architecture"
        #    run: "composer exec -- phparkitect check --config=vendor/mortexa/laravel-arkitect/src/phparkitect.php"
        -
            # https://github.com/phpstan/phpstan/issues/9475
            name: "Search for $this->$this typo üêå"
            run: |
                ! git grep --line-number -e '\$this\s*->\s*\$this' -- ':!:*/back-end\.yml'
        -
            name: "Perform static analysis"
            run: "composer exec -- phpstan analyze --level=5 src/"
            # @TODO Cognitive Complexity, Mess Detector, Magic Number Detector, Copy-Paste Detector

    coding_standards:
        name: "4Ô∏è‚É£ Coding Standards"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.2"
                coverage: "none"
                tools: "phpcs,cs2pr"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check EditorConfig configuration"
            run: "test -f .editorconfig"
        -
            name: "Check adherence to EditorConfig"
            uses: "greut/eclint-action@v0"
        -
            name: "Look for TAB characters in the middle of the line üêå"
            run: |
                ! git grep --perl-regexp --line-number -I '^(?!//)[^\t]+\t'
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            with:
                dependency-versions: "highest"
        -
            name: "Detect coding standards violations"
            run: "composer exec -- phpcs -q --report=checkstyle --standard=PSR12 src/ | cs2pr"
        #-
        #    name: "Detect coding standards violations"
        #    id: "pint"
        #    run: "composer exec -- pint --verbose --test"
        #-
        #    name: "Annotate Pint results"
        #    if: "${{ failure() && steps.pint.outcome == 'failure' }}"
        #    run: "composer exec -- pint --test --format=checkstyle | cs2pr"
        -
            # Move TODO-s into GitHub issues!
            name: "Search for TODO-s and FIXME-s üêå"
            run: |
                ! git grep --extended-regexp --ignore-case '\b(TODO|FIXME)\b' -- ':!:*/back-end\.yml'
        -
            name: "Remove blank first lines and multiple blank lines üêå"
            run: |
                git ls-files --cached -z -- ':(exclude,glob)**/yarn.lock' \
                    | xargs --null -L 1 -- sed -i -e '/./,$!d' -e '/^$/N;/^\n$/D'
        -
            name: "Check differences to repository"
            run: "git diff --exit-code"

    exported_files:
        name: "5Ô∏è‚É£ Exported files"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 1
        steps:
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check for ignored files in the index üêå"
            run: |
                # Add negated files: ':!:path/to/negated'
                IGNORED_FILES="$(git ls-files --cached --ignored --exclude-standard)"
                test -z "${IGNORED_FILES}"
        -
            name: "Check exported files"
            run: |
                EXPECTED="LICENSE,README.md,composer.json,package.json"
                CURRENT="$(
                    git archive HEAD \
                        | tar --list --exclude="src" --exclude="src/*" --exclude="resources" --exclude="resources/*" \
                        | paste --serial --delimiters=","
                )"
                echo "CURRENT =${CURRENT}"
                echo "EXPECTED=${EXPECTED}"
                test "${CURRENT}" = "${EXPECTED}"
